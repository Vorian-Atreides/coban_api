package common_test

import (
	"testing"
	"time"

	"github.com/stretchr/testify/suite"

	"coban/api/src/controllers/common"
	"coban/api/src/databases"
)

type transportHistoriesParserTestSuite struct {
	suite.Suite
}

func TestTransportHistoriesParser(t *testing.T) {
	suite.Run(t, new(transportHistoriesParserTestSuite))
}

func (s *transportHistoriesParserTestSuite) Test01WithUnsuported_TypeMachine() {
	data := [][]byte{
		[]byte{0x01, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x05, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x08, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x12, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x15, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
	}

	for _, sample := range data {
		_, err := common.ParseTransportHistory(sample)
		s.Error(err, "This type of machine isn't supported.")
	}
}

func (s *transportHistoriesParserTestSuite) Test02WithUnsuported_UseCase() {
	data := [][]byte{
		[]byte{0x16, 0x02, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x05, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x08, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x14, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x46, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
	}

	for _, sample := range data {
		_, err := common.ParseTransportHistory(sample)
		s.Error(err, "This use case isn't supported.")
	}
}

func (s *transportHistoriesParserTestSuite) Test03WithUnsuported_Length() {
	data := [][]byte{
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0xE5, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F},
	}

	for _, sample := range data {
		_, err := common.ParseTransportHistory(sample)
		s.Error(err, "The data is corrupted.")
	}
}

func (s *transportHistoriesParserTestSuite) Test04WithUfound_Entrance() {
	data := [][]byte{
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x01, 0x00,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x10,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x0B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x01, 0x2B,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
	}

	for _, sample := range data {
		_, err := common.ParseTransportHistory(sample)
		s.Error(err, "There are an error with the entrance.")
	}
}

func (s *transportHistoriesParserTestSuite) Test04WithUfound_Exit() {
	data := [][]byte{
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x01,
			0xE4, 0x3E, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x01,
			0x01, 0x01, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x01,
			0x00, 0x0B, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x01,
			0x00, 0x22, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x20, 0x48, 0x00, 0x01,
			0x00, 0x11, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
	}

	for _, sample := range data {
		_, err := common.ParseTransportHistory(sample)
		s.Error(err, "There are an error with the exit.")
	}
}

func (s *transportHistoriesParserTestSuite) Test05WithValid_Dates() {
	data := [][]byte{
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 2013-01-01
			0x00, 0x02, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x14, 0xB6, 0x00, 0x01, // 2010-05-22
			0x00, 0x02, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x0D, 0x50, 0x00, 0x01, // 2006-10-16
			0x00, 0x02, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x06, 0x46, 0x00, 0x01, // 2003-02-06
			0x00, 0x02, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1F, 0x79, 0x00, 0x01, // 2015-11-25
			0x00, 0x02, 0x98, 0x0F, 0x00, 0x0A, 0xA0, 0x00},
	}

	date1, _ := time.Parse("2006-01-02", "2013-01-01")
	date2, _ := time.Parse("2006-01-02", "2010-05-22")
	date3, _ := time.Parse("2006-01-02", "2006-10-16")
	date4, _ := time.Parse("2006-01-02", "2003-02-06")
	date5, _ := time.Parse("2006-01-02", "2015-11-25")
	expected := []time.Time{
		date1, date2, date3, date4, date5,
	}

	for i, sample := range data {
		transportHistory, err := common.ParseTransportHistory(sample)
		s.NoError(err)
		s.Equal(expected[i], transportHistory.Date)
	}
}

func (s *transportHistoriesParserTestSuite) Test06WithValid_Balances() {
	data := [][]byte{
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 10.000
			0x00, 0x02, 0x10, 0x27, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 8.222
			0x00, 0x02, 0x1E, 0x20, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 7.600
			0x00, 0x02, 0xB0, 0x1D, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 6.428
			0x00, 0x02, 0x1C, 0x19, 0x00, 0x0A, 0xA0, 0x00},
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x01, // 5.111
			0x00, 0x02, 0xF7, 0x13, 0x00, 0x0A, 0xA0, 0x00},
	}
	expected := []uint{10000, 8222, 7600, 6428, 5111}

	for i, sample := range data {
		transportHistory, err := common.ParseTransportHistory(sample)
		s.NoError(err)
		s.Equal(expected[i], transportHistory.Stock)
	}
}

func (s *transportHistoriesParserTestSuite) Test06WithValid_Row() {
	data := [][]byte{
		// 2013-01-01 / Station 1 - 2 / 10.000
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1A, 0x21, 0x00, 0x00,
			0x00, 0x01, 0x10, 0x27, 0x00, 0x0A, 0xA0, 0x00},
		// 2010-05-22 / Station 1 - 2 / 8.222
		[]byte{0x16, 0x01, 0x00, 0x02, 0x14, 0xB6, 0x00, 0x01,
			0x00, 0x02, 0x1E, 0x20, 0x00, 0x0A, 0xA0, 0x00},
		// 2006-10-16 / Station 1 - 2 / 7.600
		[]byte{0x16, 0x01, 0x00, 0x02, 0x0D, 0x50, 0x00, 0x02,
			0x00, 0x03, 0xB0, 0x1D, 0x00, 0x0A, 0xA0, 0x00},
		// 2003-02-06 / Station 1 - 2 / 6.428
		[]byte{0x16, 0x01, 0x00, 0x02, 0x06, 0x46, 0x00, 0x03,
			0x00, 0x04, 0x1C, 0x19, 0x00, 0x0A, 0xA0, 0x00},
		// 2015-11-25 / Station 1 - 2 / 5.111
		[]byte{0x16, 0x01, 0x00, 0x02, 0x1F, 0x79, 0x00, 0x04,
			0x00, 0x05, 0xF7, 0x13, 0x00, 0x0A, 0xA0, 0x00},
	}

	date1, _ := time.Parse("2006-01-02", "2013-01-01")
	date2, _ := time.Parse("2006-01-02", "2010-05-22")
	date3, _ := time.Parse("2006-01-02", "2006-10-16")
	date4, _ := time.Parse("2006-01-02", "2003-02-06")
	date5, _ := time.Parse("2006-01-02", "2015-11-25")
	expected := []databases.TransportHistory{
		databases.TransportHistory{Date: date1, EntranceID: 1,
			ExitID: 2, Stock: 10000},
		databases.TransportHistory{Date: date2, EntranceID: 2,
			ExitID: 3, Stock: 8222},
		databases.TransportHistory{Date: date3, EntranceID: 3,
			ExitID: 4, Stock: 7600},
		databases.TransportHistory{Date: date4, EntranceID: 4,
			ExitID: 5, Stock: 6428},
		databases.TransportHistory{Date: date5, EntranceID: 5,
			ExitID: 6, Stock: 5111},
	}

	for i, sample := range data {
		transportHistory, err := common.ParseTransportHistory(sample)
		s.NoError(err)
		s.Equal(expected[i], transportHistory)
	}
}
